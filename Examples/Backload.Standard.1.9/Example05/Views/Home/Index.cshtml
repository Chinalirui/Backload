@{
    ViewBag.Title = "Backload. Professional ASP.NET MVC File Upload Handler - Example 2";
}

@section styles {   
    <!-- Optional: Include jQuery ui themes for the themes switcher -->
    <link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.1/themes/dark-hive/jquery-ui.css" id="theme">
    <!-- Optional: We use the jQuery colorbox plugin to view uploaded images when we click on it. -->
    <link href="~/Content/ColorBox/colorbox.css" rel="stylesheet" />
    <!-- Optional: Some styles for this demo page -->
    <link href="~/Content/styles.css" rel="stylesheet" />
}    
    

@section scripts {
    <!-- Optional: We use the jQuery colorbox plugin to view uploaded images when we click on it. -->
    <script src="~/Scripts/ColorBox/jquery.colorbox-min.js"></script>
    <script type="text/javascript" src="~/Scripts/main.js"></script>
}
<div class="ex-head">
<h2><span class="bl">Backload.</span>&nbsp;&nbsp;A professional File Upload handler</h2>
    <span class="theme-switcher-info">Select a jQuery ui theme:</span>
    <select id="theme-switcher" class="theme-switcher">
        <option value="base">Base</option>
        <option value="black-tie">Black Tie</option>
        <option value="blitzer">Blitzer</option>
        <option value="cupertino">Cupertino</option>
        <option value="dark-hive" selected>Dark Hive</option>
        <option value="dot-luv">Dot Luv</option>
        <option value="eggplant">Eggplant</option>
        <option value="excite-bike">Excite Bike</option>
        <option value="flick">Flick</option>
        <option value="hot-sneaks">Hot sneaks</option>
        <option value="humanity">Humanity</option>
        <option value="le-frog">Le Frog</option>
        <option value="mint-choc">Mint Choc</option>
        <option value="overcast">Overcast</option>
        <option value="pepper-grinder">Pepper Grinder</option>
        <option value="redmond">Redmond</option>
        <option value="smoothness">Smoothness</option>
        <option value="south-street">South Street</option>
        <option value="start">Start</option>
        <option value="sunny">Sunny</option>
        <option value="swanky-purse">Swanky Purse</option>
        <option value="trontastic">Trontastic</option>
        <option value="ui-darkness">UI Darkness</option>
        <option value="ui-lightness">UI Lightness</option>
        <option value="vader">Vader</option>
    </select>

    <div class="ex-desc">This is a demo in a series of examples showing the usage and features of <span class="bl">Backload.</span>, a professional full featured ASP.NET MVC file upload server side controller/handler, in the version for the 
        popular <a href="https://github.com/blueimp/jQuery-File-Upload" target="_blank">jQuery File Upload plugin from blueimp</a>. 
        We're using the jQuery ui version here, but you can also use the bootstrap version. This has no influence on the <span class="bl">Backload.</span> controller. For more information on the client side 
        plugin see <a href="https://github.com/blueimp/jQuery-File-Upload" target="_blank">here</a>.<br />
        <span class="ex-imp">Important note:</span> This example uses jQuery 2.0. Older Browsers (e.g. IE < 9) are <a href="http://blog.jquery.com/2013/04/18/jquery-2-0-released/" target="_blank">not supported</a> anymore since v2.0! Use jQuery v1.9.1 instead.
    </div>
</div>
<div class="ex-inf">
<h2>Example 5: Using server side image manipulation features</h2>
    <p>Sometimes images must be resized, because of limited space, save bandwidth, the images need to be in a special form factor or special image type, etc. You can easily setup <span class="bl">Backload.</span> to handle this task on the fly when imagas are uploaded. 
        Backload can also resize or crop images with parameters defined in the config file or sent in a request by the browser. In this example we define the resize options in the config file. 
    </p>
</div>


<!-- BEGIN: jQuery Fle Upload Plugin -->
<form id="fileupload" action="/Backload/UploadHandler" method="POST" enctype="multipart/form-data">
<div class="ex-fup">
    <!-- The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload -->
    <div class="row fileupload-buttonbar">
        <div class="span7">
            <!-- The fileinput-button span is used to style the file input field as button -->
            <span class="btn btn-success fileinput-button">
                <i class="icon-plus icon-white"></i>
                <span>Add files...</span>
                <input type="file" name="files[]" multiple>
            </span>
            <button type="submit" class="btn btn-primary start">
                <i class="icon-upload icon-white"></i>
                <span>Start upload</span>
            </button>
            <button type="reset" class="btn btn-warning cancel">
                <i class="icon-ban-circle icon-white"></i>
                <span>Cancel upload</span>
            </button>
            <button type="button" class="btn btn-danger delete">
                <i class="icon-trash icon-white"></i>
                <span>Delete</span>
            </button>
            <input type="checkbox" class="toggle">
        </div>
        <!-- The global progress information -->
        <div class="span5 fileupload-progress fade">
            <!-- The global progress bar -->
            <div class="progress progress-success progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                <div class="bar" style="width:0%;"></div>
            </div>
            <!-- The extended global progress information -->
            <div class="progress-extended">&nbsp;</div>
        </div>
    </div>
    <!-- The loading indicator is shown during file processing -->
    <div class="fileupload-loading"></div>
    <br>
    <!-- The table listing the files available for upload/download -->
    <table id="demo-fup-table" role="presentation" class="table table-striped ui-widget"><tbody class="files ui-widget-content" data-toggle="modal-gallery" data-target="#modal-gallery"></tbody></table>
</div>
</form>

<!-- The template to display files available for upload -->
<script id="template-upload" type="text/x-tmpl">
{% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-upload fade ui-state-hover" data-type="{%=file.type%}">
        <td class="preview"><span class="fade"></span></td>
        <td class="name"><span>{%=file.name%}</span></td>
        <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
        {% if (file.error) { %}
            <td class="error" colspan="2"><span class="label label-important">Error</span> {%=file.error%}</td>
        {% } else if (o.files.valid && !i) { %}
            <td>
                <div class="progress progress-success progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="bar" style="width:0%;"></div></div>
            </td>
            <td>{% if (!o.options.autoUpload) { %}
                <button class="btn btn-primary start">
                    <i class="icon-upload icon-white"></i>
                    <span>Start</span>
                </button>
            {% } %}</td>
        {% } else { %}
            <td colspan="2"></td>
        {% } %}
        <td class="action">{% if (!i) { %}
            <button class="btn btn-warning cancel">
                <i class="icon-ban-circle icon-white"></i>
                <span>Cancel</span>
            </button>
        {% } %}</td>
    </tr>
{% } %}
</script>
<!-- The template to display files available for download -->
<script id="template-download" type="text/x-tmpl">
{% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-download fade ui-state-default" data-type="{%=file.extra_info.main_type%}" >
        {% if (file.error) { %}
            <td></td>
            <td class="name"><span>{%=file.name%}</span></td>
            <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
            <td class="error" colspan="2"><span class="label label-important">Error</span> {%=file.error%}</td>
        {% } else { %}
            <td class="preview">{% if (file.thumbnail_url) { %}
                <a href="{%=file.url%}" target="_blank" title="{%=file.name%}" data-gallery="gallery" download="{%=file.name%}"><img src="{%=file.thumbnail_url%}"></a>
            {% } %}</td>
            <td class="name">
                <a href="{%=file.url%}" target="_blank" title="{%=file.extra_info.original_name%}" data-gallery="{%=file.thumbnail_url&&'gallery'%}" download="{%=file.name%}">{%=file.name%}</a>
            </td>
            <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
            <td colspan="2"></td>
        {% } %}
        <td class="action">
            <button class="btn btn-danger delete" data-type="{%=file.delete_type%}" data-url="{%=file.delete_url%}"{% if (file.delete_with_credentials) { %} data-xhr-fields='{"withCredentials":true}'{% } %}>
                <i class="icon-trash icon-white"></i>
                <span>Delete</span>
            </button>
            <input type="checkbox" name="delete" value="1" class="toggle">
        </td>
    </tr>
{% } %}
</script>
<!-- END: jQuery Fle Upload Plugin -->



<div class="ex-inf">
    <h4>How to resize images</h4>
<p>We want to set the width of the resulting image to 600 pixel and the height to 400 pixel. Dpi can be omited as 96dpi is the default. We also can omit the canvasColor attribute, because
    we use "ratio" as resizeMode, which uses only the bounds of the canvas as max width/height. Finally, we let the image output type as it is (default):</p>
<pre style="font-family: Consolas; font-size: 13px; color: black; background: white;"><span style="color:blue;">&nbsp;&nbsp;&lt;</span><span style="color:#a31515;">images</span><span style="color:blue;">&nbsp;</span><span style="color:red;">width</span><span style="color:blue;">=</span>&quot;<span style="color:blue;">600</span>&quot;<span style="color:blue;">&nbsp;</span><span style="color:red;">height</span><span style="color:blue;">=</span>&quot;<span style="color:blue;">400</span>&quot;<span style="color:blue;">&nbsp;</span><span style="color:red;">dpi</span><span style="color:blue;">=</span>&quot;<span style="color:blue;">96</span>&quot;<span style="color:blue;">&nbsp;</span><span style="color:red;">canvasColor</span><span style="color:blue;">=</span>&quot;<span style="color:blue;">#00000000</span>&quot;<span style="color:blue;">&nbsp;</span><span style="color:red;">forceImageType</span><span style="color:blue;">=</span>&quot;<span style="color:blue;">none</span>&quot;<span style="color:blue;">&nbsp;</span><span style="color:red;">resizeMode</span><span style="color:blue;">=</span>&quot;<span style="color:blue;">ratio</span>&quot;<span style="color:blue;">&nbsp;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
</pre>
<br />
<p>We also want to set some options for the thumbnails. The thumbnail will have a fixed width (60 pixel) and height (40 pixel) as we use "place" as resize mode and a canvas has a fixed size. "_thumbs" will be our subfolder for thumbnails which can be omitted as it is the default (Set this to an empty string, if you don't want static thumbs to be created). As canvas color we want black opaque (no transparency, srgb: #00000000). And finally the output thumbnail will always be a PNG file.</p>
<pre style="font-family: Consolas; font-size: 13px; color: black; background: white;"><span style="color:blue;">&nbsp;&nbsp;&lt;</span><span style="color:#a31515;">thumbnails</span><span style="color:blue;">&nbsp;</span><span style="color:red;">path</span><span style="color:blue;">=</span>&quot;<span style="color:blue;"></span>&quot;<span style="color:blue;">&nbsp;</span><span style="color:red;">width</span><span style="color:blue;">=</span>&quot;<span style="color:blue;">60</span>&quot;<span style="color:blue;">&nbsp;</span><span style="color:red;">height</span><span style="color:blue;">=</span>&quot;<span style="color:blue;">40</span>&quot;<span style="color:blue;">&nbsp;</span><span style="color:red;">dpi</span><span style="color:blue;">=</span>&quot;<span style="color:blue;">96</span>&quot;<span style="color:blue;">&nbsp;</span><span style="color:red;">canvasColor</span><span style="color:blue;">=</span>&quot;<span style="color:blue;">#00000000</span>&quot;<span style="color:blue;">&nbsp;</span><span style="color:red;">resizeMode</span><span style="color:blue;">=</span>&quot;<span style="color:blue;">place</span>&quot;<span style="color:blue;">&nbsp;</span><span style="color:red;">imageType</span><span style="color:blue;">=</span>&quot;<span style="color:blue;">image/png</span>&quot;<span style="color:blue;">&nbsp;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
</pre><br />

    <h4>Conclusion</h4>
    <p>
        This example shows how to use some image manipulation options. Most options are self-explanatory, but resize modes can a bit confusing. The image below shows how original image, canvas and resize option lead to the resulting image.<br />
        <img style="border:none; margin-left:150px; margin-top:25px;" src="~/Content/images/resize-modes.png" />
    </p>
    <br />
    <h5>License information</h5>
    <p class="licenses">
        <a href="https://github.com/blackcity/backload" target="_blank">Backload. (Standard version):</a> Copyright 2015, Steffen Habermehl, License (Standard version): <a href="http://www.opensource.org/licenses/MIT" target="_blank">MIT license</a>,<br />
        <a href="mailto:s.habermehl@freenet.de" target="_blank">Professional and Enterprise versions</a> are only available under a commercial license.<br />
        Follow us on Twitter: <a href="https://twitter.com/backload_mvc" target="_blank">&#0064;Backload_MVC</a>
</p>
</div>

