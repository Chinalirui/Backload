@{
    ViewBag.Title = "Backload. Professional ASP.NET MVC File Upload Handler - Example 2";
}

@section styles {   
    <!-- Optional: Include jQuery ui themes for the themes switcher -->
    <link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.1/themes/dark-hive/jquery-ui.css" id="theme" />
    <!-- Optional: We use the jQuery colorbox plugin to view uploaded images when we click on it. -->
    <link href="~/Content/ColorBox/colorbox.css" rel="stylesheet" />
    <!-- Optional: Some styles for this demo page -->
    <link href="~/Content/styles.css" rel="stylesheet" />
}    
    

@section scripts {
    <!-- PlUpload files, latest branch from GitHub -->
    <link rel="stylesheet" href="Content/PlUpload/jquery.ui.plupload/css/jquery.ui.plupload.css" />
    <script type="text/javascript" src="Scripts/PlUpload/moxie.min.js"></script>
    <script type="text/javascript" src="Scripts/PlUpload/plupload.js"></script>
    <script type="text/javascript" src="Scripts/PlUpload/jquery.ui.plupload/jquery.ui.plupload.js"></script>

    <!-- Optional: We use the jQuery colorbox plugin to view uploaded images when we click on it. -->
    <script src="~/Scripts/ColorBox/jquery.colorbox-min.js"></script>
    <script type="text/javascript" src="~/Scripts/main.js"></script>
}
<div class="ex-head">
<h2><span class="bl">Backload.</span>&nbsp;&nbsp;A professional File Upload handler</h2>
    <span class="theme-switcher-info">Select a jQuery ui theme:</span>
    <select id="theme-switcher" class="theme-switcher">
        <option value="base">Base</option>
        <option value="black-tie">Black Tie</option>
        <option value="blitzer">Blitzer</option>
        <option value="cupertino">Cupertino</option>
        <option value="dark-hive" selected>Dark Hive</option>
        <option value="dot-luv">Dot Luv</option>
        <option value="eggplant">Eggplant</option>
        <option value="excite-bike">Excite Bike</option>
        <option value="flick">Flick</option>
        <option value="hot-sneaks">Hot sneaks</option>
        <option value="humanity">Humanity</option>
        <option value="le-frog">Le Frog</option>
        <option value="mint-choc">Mint Choc</option>
        <option value="overcast">Overcast</option>
        <option value="pepper-grinder">Pepper Grinder</option>
        <option value="redmond">Redmond</option>
        <option value="smoothness">Smoothness</option>
        <option value="south-street">South Street</option>
        <option value="start">Start</option>
        <option value="sunny">Sunny</option>
        <option value="swanky-purse">Swanky Purse</option>
        <option value="trontastic">Trontastic</option>
        <option value="ui-darkness">UI Darkness</option>
        <option value="ui-lightness">UI Lightness</option>
        <option value="vader">Vader</option>
    </select>

    <div class="ex-desc">This is a demo in a series of examples showing the usage and features of <span class="bl">Backload.</span>, a professional full featured ASP.NET MVC file upload server side controller/handler. Inthis example we use the
        <a href="https://github.com/moxiecode/plupload" target="_blank">PlUpload plugin from Moxiecode</a> as our client side uploader. In our 
        <code>IOutgoingResponse</code> extension we transform the Json output into a PlUpload friendly format. See how easy it is to serve a different uploader.<br />
        <span class="ex-imp">Important note:</span> This example uses jQuery 2.0. Older Browsers (e.g. IE < 9) are <a href="http://blog.jquery.com/2013/04/18/jquery-2-0-released/" target="_blank">not supported</a> anymore since v2.0! Use jQuery v1.9.1 instead.
    </div>
</div>
<div class="ex-inf">
<h2>Example 9: Extensibility: Handling exceptions</h2>
    <p>Handling Exceptions is an important task in any application. Backload provides you with a single point for handling exceptions. Just create an extension derived from <code>IProcessPiplineException</code>
        and your extension will be called no matter where the exception occurred during the execution of the processing pipeline. You can do whatever you want in your exception extension, for example you may want to gracefully 
        return handle and return an error message within your Json output, or you may want to stop any further processing and report a server error back. In this example you will learn 3 ways to handle the exception. 
     </p>
<!-- BEGIN: PlUpload Plugin -->
    <form  method="post" action="/Backload/UploadHandler">
	    <div id="uploader">
		    <p>Your browser doesn't have HTML5 or HTML 4 support.</p>
	    </div>
    </form>
<!-- END: PlUpload Plugin -->
    <br />
     <h4>Note on creating extensions</h4>
    <p> 
        In our MVC testing environment, We've set the output build path for the extension to the <code>~/bin/Extensions</code> folder, so we do not need to 
        copy them by hand into the Extensions folder. You may need to clean and rebuild your extensions project when you made changes. If breakpoints are not reached in your extensions code during debugging, or strange 
        exceptions occur this is a sign that your MVC application not uses the current assembly. 
    </p>
    <br />
    <h4>General overview</h4>
    <p>
        Our extensions project has 3 extensions for incoming requests, outgoing responses and exception handling. The incoming and outging extensions are only for demo purposes. The incoming extension
        throws an exception if a special file (BadFile.jpg) is uploaded and the outgoing extension transforms the output into a PlUpload friendly format. So we only need to have a 
        look into the <code>ProcessPiplineException</code> extension class and its corresponding client side JavaScript handlers. The extension class includes 3 ways of handling 
        the exception: 2 gracefully handled exceptions (Examples 1 and 2) and 1 none gracefully (Example 3). We start with example 1.
    </p>
    <br />
    <h4>Example 1: Using a <code>success</code> property (HTTP Status 200)</h4>
    <p>
        In the first example we simply set a success property to false. If a class derived from <code>IFileUploadStatus</code> not has been created yet (because the exception was too early in 
        the processing pipeline, we create our own (A <code>FileUploadStatus</code> object internally holds the values for each file handled in a request. Main purpose is to store the values for the response. Once created, the FileUploadStatus object is passed through the entire pipeline and to all extensions (after IIncomingRequest) until the results are returned to the browser). 
        Note, that after we finished our exception handling the pipeline produces the Json output as usual along with a HTTP Status code 200. 
        Now the client side <code>FileUploaded</code> event handler will be invoked, not the error handler, because of the HTTP Status 200 (ok). So in this example we need a switch 
        on the <code>file.success==[true|false]</code> condition and do the error handling ourselves.<br />
        In this demo we now want to throw an exception. This is done in our <code>IncomingRequest</code> extension when you try to upload a file named BadFile.jpg (in this examples root folder). Set 
        breakpoint in the extensions code and in the client side <code>FileUploaded</code> event handler (<code>~/Scripts/main.js</code>). Now try to upload ~/BadFile.jpg.
    </p>
        <h5>ProcessPiplineException extension code (Example 1)</h5>  
    <pre style="font-family: Consolas; font-size: 13px; color: black; background: white;">&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af;">Export</span>(<span style="color:blue;">typeof</span>(<span style="color:#2b91af;">IProcessPipelineException</span>))]
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//[PartCreationPolicy(CreationPolicy.NonShared)]</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">public</span>&nbsp;<span style="color:blue;">class</span>&nbsp;<span style="color:#2b91af;">ProcessPipelineException</span>&nbsp;:&nbsp;<span style="color:#2b91af;">IProcessPipelineException</span>
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">public</span>&nbsp;<span style="color:blue;">bool</span>&nbsp;Execute(<span style="color:#2b91af;">IBackloadContext</span>&nbsp;context,&nbsp;<span style="color:#2b91af;">IProcessPipelineExceptionParam</span>&nbsp;param)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;Example&nbsp;1:&nbsp;Graceful&nbsp;exception.&nbsp;We&nbsp;send&nbsp;an&nbsp;error&nbsp;message&nbsp;in&nbsp;our&nbsp;response</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;Extensions&nbsp;responsible&nbsp;for&nbsp;the&nbsp;outgoing&nbsp;response&nbsp;(IOutgoingResponse)&nbsp;are&nbsp;executed&nbsp;as&nbsp;usual.</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;Note:&nbsp;In&nbsp;this&nbsp;case&nbsp;the&nbsp;error&nbsp;is&nbsp;not&nbsp;handled&nbsp;in&nbsp;our&nbsp;client&nbsp;side&nbsp;error&nbsp;handler&nbsp;as&nbsp;we&nbsp;do&nbsp;not&nbsp;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;send&nbsp;a&nbsp;HTTP&nbsp;status&nbsp;error&nbsp;code&nbsp;(see&nbsp;examples&nbsp;2&nbsp;and&nbsp;3).&nbsp;Instead&nbsp;the&nbsp;response&nbsp;was&nbsp;send&nbsp;to&nbsp;our&nbsp;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;client&nbsp;side&nbsp;FileUploaded&nbsp;handler,&nbsp;so&nbsp;we&nbsp;need&nbsp;an&nbsp;if&nbsp;statement&nbsp;reading&nbsp;the&nbsp;file.success&nbsp;property&nbsp;there.</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;This&nbsp;could&nbsp;lead&nbsp;to&nbsp;a&nbsp;lot&nbsp;of&nbsp;messy&nbsp;code,&nbsp;because&nbsp;you&nbsp;have&nbsp;to&nbsp;notify&nbsp;the&nbsp;client&nbsp;uploader&nbsp;yourself&nbsp;that&nbsp;something&nbsp;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;went&nbsp;wrong.&nbsp;PlUpload&nbsp;isn&#39;t&nbsp;very&nbsp;good&nbsp;in&nbsp;changing&nbsp;the&nbsp;state&nbsp;from&nbsp;your&nbsp;code.&nbsp;Example&nbsp;2&nbsp;provides&nbsp;a&nbsp;cleaner&nbsp;solution.</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;Don&#39;t&nbsp;forget&nbsp;to&nbsp;rebuild&nbsp;your&nbsp;extension&nbsp;if&nbsp;you&nbsp;have&nbsp;not&nbsp;set&nbsp;a&nbsp;project&nbsp;dependency&nbsp;in&nbsp;your&nbsp;MVC&nbsp;app</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.Response.StatusCode&nbsp;=&nbsp;200;&nbsp;<span style="color:green;">//&nbsp;Backload&nbsp;has&nbsp;set&nbsp;500&nbsp;Internal&nbsp;Server&nbsp;Error,&nbsp;we&nbsp;revert&nbsp;this&nbsp;for&nbsp;demo&nbsp;purposes</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">if</span>&nbsp;((param.FileStatus&nbsp;!=&nbsp;<span style="color:blue;">null</span>)&nbsp;&amp;&amp;&nbsp;(param.FileStatus.Files.Count&nbsp;&gt;&nbsp;0))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">foreach</span>&nbsp;(<span style="color:blue;">var</span>&nbsp;file&nbsp;<span style="color:blue;">in</span>&nbsp;param.FileStatus.Files)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.ErrorMessage&nbsp;=&nbsp;param.Exception.Message;&nbsp;<span style="color:green;">//&nbsp;for&nbsp;simplicity&nbsp;we&nbsp;set&nbsp;the&nbsp;error&nbsp;to&nbsp;all&nbsp;FileUploadStatusItems</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.Success&nbsp;=&nbsp;<span style="color:blue;">false</span>;&nbsp;<span style="color:green;">//&nbsp;for&nbsp;simplicity&nbsp;we&nbsp;set&nbsp;the&nbsp;error&nbsp;to&nbsp;all&nbsp;FileUploadStatusItems</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">else</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;For&nbsp;demo&nbsp;only.&nbsp;We&nbsp;build&nbsp;our&nbsp;own&nbsp;FileStatus.&nbsp;FileStatusSimple&nbsp;has&nbsp;no&nbsp;logic&nbsp;implemented,&nbsp;its&nbsp;only&nbsp;a&nbsp;property&nbsp;bag.</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af;">FileStatusSimple</span>&nbsp;status&nbsp;=&nbsp;<span style="color:blue;">new</span>&nbsp;<span style="color:#2b91af;">FileStatusSimple</span>();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">for</span>&nbsp;(<span style="color:blue;">int</span>&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;context.Request.Files.Count;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">var</span>&nbsp;file&nbsp;=&nbsp;context.Request.Files[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status.Files.Add(<span style="color:blue;">new</span>&nbsp;<span style="color:#2b91af;">FileStatusSimpleItem</span>(file.FileName,&nbsp;file.ContentType,&nbsp;file.ContentLength,&nbsp;<span style="color:#a31515;">&quot;&quot;</span>,&nbsp;param.Exception.Message,&nbsp;<span style="color:blue;">false</span>));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;Now&nbsp;that&nbsp;we&nbsp;have&nbsp;a&nbsp;simple&nbsp;IFileUploadStatus&nbsp;object&nbsp;it&nbsp;can&nbsp;be&nbsp;transformed&nbsp;in&nbsp;our&nbsp;outgoing&nbsp;extension&nbsp;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;into&nbsp;a&nbsp;PlUpload&nbsp;friendly&nbsp;Json&nbsp;format.&nbsp;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param.FileStatus&nbsp;=&nbsp;status;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
    <h5>Client side FileUploaded event handler</h5>  
    <pre style="font-family: Consolas; font-size: 13px; color: black; background: white;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;If&nbsp;the&nbsp;HTTP&nbsp;status&nbsp;code&nbsp;is&nbsp;&lt;&nbsp;400&nbsp;the&nbsp;FileUploaded&nbsp;event&nbsp;handler&nbsp;will&nbsp;be&nbsp;called</span>
&nbsp;&nbsp;&nbsp;&nbsp;uploader.bind(<span style="color:#a31515;">&#39;FileUploaded&#39;</span>,&nbsp;<span style="color:blue;">function</span>&nbsp;(up,&nbsp;files,&nbsp;result)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.each(files,&nbsp;<span style="color:blue;">function</span>&nbsp;(i,&nbsp;file)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">if</span>&nbsp;(remoteFiles[i].success)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;Everything&nbsp;is&nbsp;ok</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span style="color:blue;">else</span>&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;Something&nbsp;went&nbsp;wrong</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;We&nbsp;are&nbsp;here&nbsp;because&nbsp;in&nbsp;Example&nbsp;1&nbsp;of&nbsp;our&nbsp;server&nbsp;side&nbsp;exception&nbsp;extension&nbsp;the&nbsp;HTTP&nbsp;status&nbsp;code&nbsp;is&nbsp;set&nbsp;to&nbsp;200&nbsp;(default)</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;In&nbsp;Example&nbsp;2&nbsp;and&nbsp;3&nbsp;we&nbsp;set&nbsp;the&nbsp;HTTP&nbsp;status&nbsp;code&nbsp;500&nbsp;within&nbsp;the&nbsp;extension,&nbsp;so&nbsp;this&nbsp;handler&nbsp;will&nbsp;not&nbsp;be&nbsp;called&nbsp;and&nbsp;we&nbsp;do&nbsp;not</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;need&nbsp;to&nbsp;switch&nbsp;on&nbsp;the&nbsp;file.success&nbsp;condition.</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;});
    </pre>
    <br />
    <h4>Example 2: Send a Http Status code</h4>
    <p>
        This example differs only in one additional line of code. This will send an Http 500 Internal Server along with your Json data.
        All further extension (other exception handling extensions (maybe logging or saving to a temp file, etc.) and output extensions will be called as usual. But now the 
        client side Error handler will be invoked. This is a cleaner solution because we let the client side plugin do the hard work and do not mess up the client FileUploaded handler.<br />
        Comment in the line marked with "Example 2". Set a breakpoint and set an additional breakpoint in the client side <code>Error</code> event handler (main.js). Upload ~/BadFile.jpg.
    </p>
    <h5>Added line in the erver side extension code (Example 29)</h5>
        <pre style="font-family: Consolas; font-size: 13px; color: black; background: white;">&nbsp;&nbsp;&nbsp;<span style="color:green;">//</span>
&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;Example&nbsp;2:&nbsp;Set&nbsp;Response&nbsp;code&nbsp;to&nbsp;a&nbsp;valid&nbsp;http&nbsp;status&nbsp;code&nbsp;(e.g.&nbsp;500&nbsp;Internal&nbsp;server&nbsp;error.</span>
&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;Extensions&nbsp;responsible&nbsp;for&nbsp;the&nbsp;outgoing&nbsp;response&nbsp;(IOutgoingResponse)&nbsp;are&nbsp;executed&nbsp;as&nbsp;usual&nbsp;and&nbsp;can&nbsp;build&nbsp;a&nbsp;custom&nbsp;Json&nbsp;response</span>
&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;which&nbsp;will&nbsp;be&nbsp;sent&nbsp;with&nbsp;the&nbsp;HTTP&nbsp;status&nbsp;code.&nbsp;The&nbsp;client&nbsp;error&nbsp;handler&nbsp;can&nbsp;use&nbsp;the&nbsp;Json&nbsp;object.</span>
&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;Comment&nbsp;in&nbsp;the&nbsp;following&nbsp;line&nbsp;(Don&#39;t&nbsp;forget&nbsp;to&nbsp;clean&nbsp;and&nbsp;rebuild&nbsp;your&nbsp;solution):</span>
&nbsp;&nbsp;&nbsp;<span style="color:green;">//</span>
&nbsp;&nbsp;&nbsp;context.Response.StatusCode&nbsp;=&nbsp;500;</pre>
    <h5>Client side error handler</h5>
        <pre style="font-family: Consolas; font-size: 13px; color: black; background: white;">&nbsp;<span style="color:green;">//&nbsp;If&nbsp;the&nbsp;HTTP&nbsp;status&nbsp;code&nbsp;is&nbsp;&gt;=&nbsp;400&nbsp;the&nbsp;Error&nbsp;handler&nbsp;will&nbsp;be&nbsp;called</span>
&nbsp;uploader.bind(<span style="color:#a31515;">&#39;Error&#39;</span>,&nbsp;<span style="color:blue;">function</span>&nbsp;(up,&nbsp;err)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">var</span>&nbsp;file&nbsp;=&nbsp;err.file;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">if</span>&nbsp;(<span style="color:blue;">typeof</span>&nbsp;err.response&nbsp;===&nbsp;<span style="color:#a31515;">&quot;string&quot;</span>)&nbsp;resp&nbsp;=&nbsp;$.parseJSON(err.response);&nbsp;<span style="color:green;">//&nbsp;if&nbsp;string&nbsp;convert&nbsp;to&nbsp;an&nbsp;object</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">else</span>&nbsp;resp&nbsp;=&nbsp;err.response;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;We&nbsp;have&nbsp;a&nbsp;response&nbsp;object,&nbsp;if&nbsp;we&nbsp;use&nbsp;graceful&nbsp;exception&nbsp;handling&nbsp;in&nbsp;our&nbsp;extension.&nbsp;Otherwise,&nbsp;if&nbsp;we&nbsp;throw&nbsp;an&nbsp;error,&nbsp;this&nbsp;is&nbsp;null</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(<span style="color:#a31515;">&#39;.plupload_header&nbsp;.plupload_message&#39;</span>).remove();&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;remove&nbsp;existing&nbsp;error&nbsp;message</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$uploaderwidget.notify(<span style="color:#a31515;">&quot;error&quot;</span>,&nbsp;<span style="color:#a31515;">&quot;&lt;strong&gt;HTTP&nbsp;Error&nbsp;&quot;</span>&nbsp;+&nbsp;err.status&nbsp;+&nbsp;<span style="color:#a31515;">&quot;&lt;/strong&gt;&nbsp;&lt;br&nbsp;/&gt;&lt;i&gt;An&nbsp;error&nbsp;has&nbsp;occured&nbsp;during&nbsp;the&nbsp;last&nbsp;operation&quot;</span>&nbsp;+&nbsp;((file&nbsp;!=&nbsp;<span style="color:blue;">null</span>)&nbsp;?&nbsp;file.name&nbsp;:&nbsp;<span style="color:#a31515;">&quot;&quot;</span>)&nbsp;+&nbsp;<span style="color:#a31515;">&quot;.&lt;/i&gt;&quot;</span>);
&nbsp;});</pre>

        <h4>Example 3: Throwing an HttpException</h4>
    <p>
        In the last example we throw an HttpException (500 Internal server error). This terminates the processing pipeline and the Server returns the HTTP status code. In this case no extensions (e.g. OutgoingResponse extensions) will be called and the response body is empty. But the client side 
        Error handler will be invoked and can do its tasks. If you do not need any data from the response body and other extensions must not be executed, this maybe also is a solution for you (Client side code is the same as in example 2).<br />
        Set the breakpoints and upload the file ~/BadFile.jpg.
    </p>
    <h5>Added line to throw a HttpException</h5>
    <pre style="font-family: Consolas; font-size: 13px; color: black; background: white;">&nbsp;&nbsp;&nbsp;<span style="color:green;">//</span>
&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;Example&nbsp;3:&nbsp;We&nbsp;throw&nbsp;an&nbsp;exception,&nbsp;so&nbsp;ASP.MVC&nbsp;sends&nbsp;out&nbsp;an&nbsp;http&nbsp;status&nbsp;code.</span>
&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;Extensions&nbsp;responsible&nbsp;for&nbsp;the&nbsp;outgoing&nbsp;response&nbsp;(IOutgoingResponse)&nbsp;are&nbsp;not&nbsp;executed&nbsp;anymore.</span>
&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;The&nbsp;response&nbsp;body&nbsp;is&nbsp;null&nbsp;in&nbsp;this&nbsp;case,&nbsp;because&nbsp;no&nbsp;JsonResult&nbsp;has&nbsp;been&nbsp;created.</span>
&nbsp;&nbsp;&nbsp;<span style="color:green;">//&nbsp;Comment&nbsp;in&nbsp;the&nbsp;following&nbsp;line&nbsp;(Don&#39;t&nbsp;forget&nbsp;to&nbsp;clean&nbsp;and&nbsp;rebuild&nbsp;your&nbsp;solution):</span>
&nbsp;&nbsp;&nbsp;<span style="color:green;">//</span>
&nbsp;&nbsp;&nbsp;<span style="color:blue;">throw</span>&nbsp;<span style="color:blue;">new</span>&nbsp;<span style="color:#2b91af;">HttpException</span>(500,&nbsp;Exception.Message,&nbsp;Exception);</pre>
    <br />
    <h4>Conclusion</h4>
    <p>
        In this example you learned how to handle exceptions. Backload provides you with the means to handle an exception gracefully or terminate the further processing. It's up to you how to handle exceptions, 
        but in most cases Example 2 is the best method. Don't forget, that you can have multiple exception handling extensions installed in the Extensions folder and every extension can do a specific task even 
        in the case of exceptions.
    </p>
    <br />
    <h5>License information</h5>
    <p class="licenses">
        <a href="https://github.com/blackcity/backload" target="_blank">Backload. (Standard version):</a> Copyright 2015, Steffen Habermehl, License (Standard version): <a href="http://www.opensource.org/licenses/MIT" target="_blank">MIT license</a>,<br />
        <a href="mailto:s.habermehl@freenet.de" target="_blank">Professional and Enterprise versions</a> are only available under a commercial license.<br />
        Follow us on Twitter: <a href="https://twitter.com/backload_mvc" target="_blank">&#0064;Backload_MVC</a>
	</p>
</div>

